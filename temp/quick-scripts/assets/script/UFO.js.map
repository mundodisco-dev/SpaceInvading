{"version":3,"sources":["UFO.js"],"names":["cc","Class","extends","Component","properties","speed","canvas","Node","laser","default","type","onLoad","speedRotation","maxRotation","isSpawned","isMoving","minPosX","node","parent","width","maxPosX","points","UFOLaser","getComponent","on","laserDone","setInputControlByTouch","self","EventType","TOUCH_START","event","touches","getTouches","touchLoc","getLocation","inRange","position","convertToNodeSpaceAR","activateLaser","myPosition","clickedPosition","x","y","laserAttacked","activatedByHit","onCollisionEnter","other","updateScore","decidedToSpawn","rotate","newRotation","rotation","random0To1","goOtherSide","newPosX","setPositionX","update","dt","active"],"mappings":"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","file":"unknown","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        speed: 2,\r\n        canvas: cc.Node,\r\n        laser: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n      this.speedRotation = 0.5;\r\n      this.maxRotation = 25;\r\n      this.isSpawned = false;\r\n      this.isMoving = true;\r\n      this.minPosX = -this.node.parent.width/2 - 400;\r\n      this.maxPosX = this.node.parent.width/2 + 400;\r\n      this.points = 125;\r\n      this.UFOLaser = this.laser.getComponent(\"UFOLaser\");\r\n      this.node.on('laserDone', this.laserDone, this);\r\n      this.setInputControlByTouch();\r\n    },\r\n\r\n    setInputControlByTouch: function ()\r\n    {\r\n      var self = this;\r\n      this.canvas.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n      var touches = event.getTouches();\r\n      var touchLoc = touches[0].getLocation();\r\n      if (self.inRange(self.node.position,this.parent.convertToNodeSpaceAR(touchLoc)))\r\n      {\r\n        // TO-DO activar tras un tiempo\r\n        self.activateLaser(false);\r\n      }\r\n      }, this.node);\r\n    },\r\n\r\n    inRange: function (myPosition,clickedPosition)\r\n    {\r\n      return ((myPosition.x < clickedPosition.x + 50) && (myPosition.x > clickedPosition.x - 50) && (myPosition.y < clickedPosition.y + 50) && (myPosition.y > clickedPosition.y - 50))\r\n    },\r\n\r\n    laserDone: function ()\r\n    {\r\n      this.isMoving = true;\r\n      this.laserAttacked = false;\r\n    },\r\n\r\n    activateLaser: function (activatedByHit)\r\n    {\r\n      this.isMoving = false;\r\n      this.laserAttacked = true;\r\n      this.activatedByHit = activatedByHit;\r\n    },\r\n\r\n    onCollisionEnter: function (other, self)\r\n    {\r\n      // TO-DO heroe para escudo\r\n      this.canvas.getComponent(\"Game\").updateScore(this.points);\r\n      this.activateLaser(true);\r\n    },\r\n\r\n\r\n    decidedToSpawn: function (){\r\n      // TO-DO\r\n      return true;\r\n    },\r\n\r\n    rotate: function (){\r\n      var newRotation = this.node.rotation + this.speedRotation;\r\n      if (newRotation > this.maxRotation || newRotation < -this.maxRotation)\r\n      {\r\n        this.speedRotation *=-1;\r\n      }\r\n      else if (cc.random0To1() < 0.05) this.speedRotation *=-1;\r\n      this.node.rotation = newRotation;\r\n    },\r\n\r\n    goOtherSide: function () {\r\n      var newPosX = this.node.position.x + this.speed;\r\n      this.node.setPositionX(newPosX);\r\n      if (newPosX > this.maxPosX || newPosX < this.minPosX)\r\n      {\r\n        this.speed *=-1;\r\n        this.isSpawned = false;\r\n      }\r\n      this.rotate();\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n      if (this.isMoving && (this.isSpawned || this.decidedToSpawn()))\r\n      {\r\n        this.goOtherSide();\r\n      }\r\n      if (this.laserAttacked)\r\n      {\r\n        this.laser.active = true;\r\n        this.UFOLaser.activateLaser(this.activatedByHit);\r\n      }\r\n\r\n    },\r\n});\r\n"]}