{"version":3,"sources":["..\\..\\..\\..\\assets\\script/assets\\script\\Hero.js"],"names":["cc","Class","extends","Component","properties","canvas","Node","speed","onLoad","moveThreshold","isMoving","direction","sideMargin","getComponent","minPosX","node","parent","width","maxPosX","currentSideAnimation","lives","setInputControlByTouch","self","on","EventType","TOUCH_START","event","touches","getTouches","touchLoc","getLocation","moveToPos","convertToNodeSpaceAR","TOUCH_MOVE","TOUCH_END","setInputControl","eventManager","addListener","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","a","left","accLeft","accRight","d","right","onKeyReleased","TOUCH_ONE_BY_ONE","onTouchBegan","touch","x","winSize","onTouchEnded","setSideAnimation","side","sprite","Sprite","url","loader","loadRes","SpriteFrame","err","spriteFrame","onCollisionEnter","other","Event","EventCustom","setUserData","type","dispatchEvent","destroy","moveLeft","y","moveRight","stopped","lifeIncrease","update","dt","oldPos","position","newPos","pAdd","pMult","Math","abs","setPositionX"],"mappings":"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","file":"unknown","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        canvas: cc.Node,\r\n        speed: 250,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n      this.moveThreshold = 1;\r\n      this.isMoving = false;\r\n      this.direction = 0;\r\n      // screen boundaries\r\n      this.sideMargin = this.canvas.getComponent(\"Game\").sideMargin;\r\n      this.minPosX = -this.node.parent.width/2 + this.sideMargin;\r\n      this.maxPosX = this.node.parent.width/2 - this.sideMargin;\r\n      this.currentSideAnimation = 0;\r\n      this.lives = 100;\r\n      // this.setInputControlByTouch();\r\n      // this.setInputControl();\r\n    },\r\n\r\n    setInputControlByTouch: function ()\r\n    {\r\n      var self = this;\r\n      this.canvas.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n          var touches = event.getTouches();\r\n          var touchLoc = touches[0].getLocation();\r\n          self.isMoving = true;\r\n          self.moveToPos = this.parent.convertToNodeSpaceAR(touchLoc);\r\n      }, this.node);\r\n      this.canvas.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\r\n          var touches = event.getTouches();\r\n          var touchLoc = touches[0].getLocation();\r\n          self.moveToPos = this.parent.convertToNodeSpaceAR(touchLoc);\r\n      }, this.node);\r\n      this.canvas.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n          self.isMoving = false; // when touch ended, stop moving\r\n      }, this.node);\r\n    },\r\n\r\n    setInputControl: function () {\r\n        var self = this;\r\n        //add keyboard input listener to jump, turnLeft and turnRight\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            // set a flag when key pressed\r\n            onKeyPressed: function(keyCode, event) {\r\n                switch(keyCode) {\r\n                    case cc.KEY.a:\r\n                    case cc.KEY.left:\r\n                        self.accLeft = true;\r\n                        self.accRight = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                    case cc.KEY.right:\r\n                        self.accLeft = false;\r\n                        self.accRight = true;\r\n                        break;\r\n                }\r\n            },\r\n            // unset a flag when key released\r\n            onKeyReleased: function(keyCode, event) {\r\n                switch(keyCode) {\r\n                    case cc.KEY.a:\r\n                    case cc.KEY.left:\r\n                        self.accLeft = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                    case cc.KEY.right:\r\n                        self.accRight = false;\r\n                        break;\r\n                }\r\n            }\r\n        }, self.node);\r\n\r\n        // touch input\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\r\n            onTouchBegan: function(touch, event) {\r\n                var touchLoc = touch.getLocation();\r\n                if (touchLoc.x >= cc.winSize.width/2) {\r\n                    self.accLeft = false;\r\n                    self.accRight = true;\r\n                } else {\r\n                    self.accLeft = true;\r\n                    self.accRight = false;\r\n                }\r\n                // don't capture the event\r\n                return true;\r\n            },\r\n            onTouchEnded: function(touch, event) {\r\n                self.accLeft = false;\r\n                self.accRight = false;\r\n            }\r\n        }, self.node);\r\n    },\r\n\r\n\r\n    setSideAnimation: function (side) {\r\n      if (side == 0) side = ''\r\n      else if (side > 0) side = 'Right'\r\n      else side = 'Left';\r\n      var sprite = this.getComponent(cc.Sprite);\r\n      var url = \"Sprites/Hero/player\"+side;\r\n      cc.loader.loadRes(url, cc.SpriteFrame, function (err, spriteFrame) {\r\n        sprite.spriteFrame = spriteFrame;\r\n      });\r\n    },\r\n\r\n    onCollisionEnter: function (other, self) {\r\n      // TO-DO\r\n      this.lives--;\r\n      if (this.lives >= 0)\r\n      {\r\n        // TO-DO destroy y respawn\r\n        var event = new cc.Event.EventCustom(\"numLifesChanged\", true);\r\n        event.setUserData({type:-1});\r\n        this.node.dispatchEvent(event);\r\n      }\r\n      else\r\n      {\r\n        var event = new cc.Event.EventCustom(\"GameOver\", true);\r\n        this.node.dispatchEvent(event);\r\n        this.node.destroy();\r\n      }\r\n      // TO-DO colision del UFO te da escudo\r\n    },\r\n\r\n    moveLeft: function(){\r\n      this.isMoving = true;\r\n      this.direction = {x:-1,y:0};\r\n    },\r\n\r\n    moveRight: function(){\r\n      this.isMoving = true;\r\n      this.direction = {x:1,y:0};\r\n    },\r\n\r\n    stopped: function(){\r\n      this.isMoving = false;\r\n      this.direction = {x:0,y:0};\r\n    },\r\n\r\n    lifeIncrease: function()\r\n    {\r\n      var event = new cc.Event.EventCustom(\"numLifesChanged\", true);\r\n      this.lives++;\r\n      event.setUserData({type:1});\r\n      this.node.dispatchEvent(event);\r\n    },\r\n    // called every frame\r\n    update: function (dt) {\r\n      if (this.lives < 0) return;\r\n      if (!this.isMoving)\r\n      {\r\n        if (this.currentSideAnimation == 0) return;\r\n        this.currentSideAnimation = 0;\r\n        this.setSideAnimation(0);\r\n        return;\r\n      }\r\n      var oldPos = this.node.position;\r\n      // get move direction\r\n      // var direction = cc.pNormalize(cc.pSub(this.moveToPos, oldPos));\r\n      // console.log(direction);\r\n      // console.log(this.direction);\r\n      // multiply direction with distance to get new position\r\n      var newPos = cc.pAdd(oldPos, cc.pMult(this.direction, this.speed * dt));\r\n\r\n      // limit player position inside screen\r\n      if ( newPos.x > this.maxPosX) {\r\n          newPos.x = this.maxPosX;\r\n          return;\r\n      } else if (newPos.x < this.minPosX) {\r\n          this.node.x = this.minPosX;\r\n          return;\r\n      }\r\n      if (Math.abs(oldPos.x - newPos.x) > this.moveThreshold)\r\n      {\r\n        this.setSideAnimation(this.direction.x);\r\n        this.currentSideAnimation = this.direction.x;\r\n        this.node.setPositionX(newPos.x);\r\n      }\r\n\r\n    },\r\n});\r\n"]}